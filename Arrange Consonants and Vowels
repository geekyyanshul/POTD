//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

struct Node
{
	char data;
	struct Node *next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};

void printlist(Node *head)
{
	if (head==NULL)return;
	while (head != NULL)
	{
		cout << head->data << " ";
		head = head->next;
	}
	cout << endl;
}

void append(struct Node** headRef, char data)
{
	struct Node* new_node = new Node(data);
	struct Node *last = *headRef;

	if (*headRef == NULL)
	{
	    *headRef = new_node;
	    return;
	}
	while (last->next != NULL)
		last = last->next;
	last->next = new_node;
	return;
}


// } Driver Code Ends
/*
Structure of the node of the linked list is as
struct Node
{
	char data;
	struct Node *next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/

class Solution
{
    private:
    bool isVowel(char ch){
        if(ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')
            return true;
        else 
            return false;
    }
    public:
    struct Node* arrangeCV(Node *head)
    {
       if(!head) return head;
       Node * p1 = new Node(-1);
       Node * p2 = p1;
       p1->next = head;
       
       Node * a1 = head;
       Node * a2 = head;
       
       while(a1 && isVowel(a1->data)){
           p1 = a1;
           a1 = a1->next;
           p2 = a2;
           a2 = a2->next;
       }
       
       while(a1 && !isVowel(a1->data)){
           p1 = a1;
           a1 = a1->next;
       }
       if(a1 == NULL) return head;
       
       while(a2 && isVowel(a2->data)){
           p2 = a2;
           a2 = a2->next;
       }
       if(a2 == NULL) return head;
       
       if(!isVowel(head->data)) head=a1;
       
       while(a1 && a2){
           p1->next = p1->next->next;
           p2->next = a1;
           a1->next = a2;
           
           p2=p2->next;
           a1=p1->next;
           while(a1 && !isVowel(a1->data)){
               p1 = a1;
               a1 = a1->next;
           }
       }
       return head;
    }
};


//{ Driver Code Starts.

// task is to complete this function
int main()
{
    int T;
    cin>>T;
    while(T--){
        int n;
        char tmp;
        struct Node *head = NULL;
        cin>>n;
        while(n--){
            cin>>tmp;
            append(&head, tmp);
        }
        Solution obj;
        head = obj.arrangeCV(head);
        printlist(head);
    }
	return 0;
}


// } Driver Code Ends
